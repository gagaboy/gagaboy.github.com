<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 运行Moqui | 问道]]></title>
  <link href="http://gagaboy.github.io/blog/categories/yun-xing-moqui/atom.xml" rel="self"/>
  <link href="http://gagaboy.github.io/"/>
  <updated>2014-06-15T19:19:31+08:00</updated>
  <id>http://gagaboy.github.io/</id>
  <author>
    <name><![CDATA[Eric Chang]]></name>
    <email><![CDATA[gagaboy@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【原创译文】运行Moqui  ]]></title>
    <link href="http://gagaboy.github.io/blog/2014/06/03/moquichap7/"/>
    <updated>2014-06-03T09:55:21+08:00</updated>
    <id>http://gagaboy.github.io/blog/2014/06/03/moquichap7</id>
    <content type="html"><![CDATA[<h2>下载Moqui以及必备软件</h2>

<p>Moqui框架默认的配置软件只需要Java的JDK 6及以后版本（推荐JDK 7）。源码构建编译框架需要Gradle 1.6及以后版本。</p>

<p>你可以从SourceForge下载Moqui框架：</p>

<p><a href="https://sourceforge.net/projects/moqui/files/">https://sourceforge.net/projects/moqui/files/</a></p>

<!--more-->


<p>选择最新版本的目录，然后任意选择二进制或者源码发布包。框架的二进制发布包以“moqui-&lt;版本号>.zip”命名，源码包以“moqui-&lt;版本号>-src.zip”命名。</p>

<p>Moqui框架的最新源码可以通过GitHub进行下载和在线预览，地址为：</p>

<p><a href="https://github.com/jonesde/moqui" title="moqui源码">https://github.com/jonesde/moqui</a></p>

<p>同样的业务地幔构件的GitHub最新代码地址为：</p>

<p><a href="https://github.com/jonesde/mantle" title="mantle源码">https://github.com/jonesde/mantle</a></p>

<p>虽然你可以单独的从GitHub上下载Mantle 地幔构件，但是在SourceForge上也有一个内嵌Moqui框架环境的Mantle整包。</p>

<h2>运行时目录以及Moqui的XML配置文件</h2>

<p>Moqui框架部署运行主要有三个核心部分：</p>

<blockquote><ul>
<li>可执行的WAR包文件（详细见下）</li>
<li>运行时目录</li>
<li>Moqui配置文件（XML格式）</li>
</ul>
</blockquote>

<p>不管你怎么使用这个可执行的WAR文件，你必须拥有一个运行时的目录，同时你也许会重写Moqui默认配置文件（<em><code>MoquiDefaultConf.xml</code></em>文件）里的配置信息，例如在运行时目录或者conf目录中的<em><code>MoquiProductionConf.xml</code></em>文件里面重写。</p>

<p>运行时目录主要放置的是你想要加载的组件、应用系统的入口文件（界面入口文件）以及配置文件。同时，框架会在这个目录下存放日志文件，Derby 数据库文件（如果你使用Derby数据库的话）等。也许你最终是要在自己的代码库里面创建自己的运行时目录，你可以把默认的运行时目录作为你的工程的起始点。
运行的时候，需要指定下如下两个属性：</p>

<table>
<thead>
<tr>
<th>属性</th>
<th>属性说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><em><strong> moqui.runtime </strong></em> </td>
<td>指定运行时目录（如果存在runtime的子目录，默认配置为“./runtime”;如果不存在，则配置为“.”）</td>
</tr>
<tr>
<td><em><strong> moqui.conf </strong></em> </td>
<td>指定Moqui的运行时配置文件（类似上面配置，使用URL或者路径方式配置）</td>
</tr>
</tbody>
</table>


<p>这里有两种方式去指定这两个属性：</p>

<blockquote><ul>
<li>通过编译路径下的<em><code> MoquiInit.properties</code></em> 文件</li>
<li>在命令行通过系统属性去指定（使用java -D 参数）</li>
</ul>
</blockquote>

<h2>可执行的WAR文件</h2>

<p>耶，是的：就是一个可以执行的WAR文件。你主要做的就是下面这些事情（通过简单的命令去按需展示和修改）：</p>

<table>
<thead>
<tr>
<th></th>
<th>命令说明        </th>
<th align="center">命令示例</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td><em><strong>加载数据</strong></em> </td>
<td align="center">$ java -jar moqui-&lt;version>.war -load</td>
</tr>
<tr>
<td></td>
<td><em><strong>运行内置的web服务</strong></em> </td>
<td align="center">$ java -jar moqui-&lt;version>.war</td>
</tr>
<tr>
<td></td>
<td><em><strong> WAR包形式部署（Tomcat等）</strong></em> </td>
<td align="center">$ cp moqui-&lt;version>.war ../tomcat/webapps</td>
</tr>
<tr>
<td></td>
<td><em><strong> 显示配置和帮助信息）</strong></em> </td>
<td align="center">$ java -jar moqui-&lt;version>.war -help</td>
</tr>
</tbody>
</table>


<p>当运行数据加载器时（使用 -load 参数），以下的附加参数都是可用的：</p>

<table>
<thead>
<tr>
<th></th>
<th> 附加参数             </th>
<th align="center"> 使用说明           </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> <em><strong>-types=&lt;type>[,&lt;type>]</strong></em></td>
<td align="center"> 加载指定的数据类型，适配entity-facade-xml.@type属性（可以是任意的数据，通常为：种子数据，种子初始化数据，样例数据等）</td>
</tr>
<tr>
<td></td>
<td> <em><strong>-location=&lt;location> </strong></em> </td>
<td align="center"> 加载指定路径下的单个数据文件  </td>
</tr>
<tr>
<td></td>
<td> <em><strong>-timeout=&lt;seconds> </strong></em> </td>
<td align="center"> 每个文件加载事务的超时时间，默认为600秒（10分钟）</td>
</tr>
<tr>
<td></td>
<td> <em><strong>-dummy-fks </strong></em>    </td>
<td align="center"> 使用虚拟外键，规避引用完整性错误</td>
</tr>
<tr>
<td></td>
<td> <em><strong>-use-try-insert </strong></em> </td>
<td align="center"> 尝试插入、更新操作来替代优先检查数据记录的异常校验</td>
</tr>
<tr>
<td></td>
<td> <em><strong>-tenantId=&lt;tenantId> </strong></em> </td>
<td align="center"> 加载指定租户ID的数据</td>
</tr>
</tbody>
</table>


<p>注意下，如果命令中没有<em>-types</em> 或者 <em>-location</em> 参数，将会加载所有已知类型的数据文件。</p>

<p>上面显示的运行时配置moqui.runtime 和moqui.conf 属性的例子来源于编译路径下的MoquiInit.properties文件。通过命令行来指定这些参数的例子如下：</p>

<p><code>$ java –D moqui.conf=conf/MoquiStagingConf.xml -jar moqui-&lt;version&gt;.war</code></p>

<p>注意：moqui.conf参数的路径关联的是moqui.runtime的目录，或者换句话说，指定的是相应运行时目录下的配置文件。</p>

<p>当运行内嵌的web服务（除了使用<em>-load</em>和<em>-help</em>参数）使用的是Winstone Servlet容器。完整的Winstone可用参数列表，请参见：</p>

<p><a href="http://winstone.sourceforge.net/#commandLine">http://winstone.sourceforge.net/#commandLine</a></p>

<p>为了方便使用，此处罗列下常用的Winstone参数：</p>

<table>
<thead>
<tr>
<th></th>
<th> 参数             </th>
<th align="center"> 参数说明           </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> <em><strong> &mdash;httpPort</strong></em> </td>
<td align="center"> 设置http的监听端口。-1表示禁用，默认为8080</td>
</tr>
<tr>
<td></td>
<td> <em><strong> &mdash;httpListenAddress </strong></em> </td>
<td align="center"> 设置http的监听地址。默认为所有接口</td>
</tr>
<tr>
<td></td>
<td> <em><strong> &mdash;httpsPort </strong></em> </td>
<td align="center"> 设置https的监听端口。-1表示禁用，默认禁用</td>
</tr>
<tr>
<td></td>
<td> <em><strong> &mdash;ajp13Port </strong></em> </td>
<td align="center"> 设置ajp13的监听端口。-1表示禁用，默认为8009</td>
</tr>
<tr>
<td></td>
<td> <em><strong> &mdash;controlPort </strong></em> </td>
<td align="center"> 设置关闭/控制的端口。-1表示禁用，默认禁用</td>
</tr>
</tbody>
</table>


<h2>在WAR文件中内嵌运行时目录</h2>

<p>Moqui框架能够运行加载一个外部的运行时目录（独立于WAR文件之外），也支持运行时目录打包在WAR文件内部的方式。内嵌的方式特别适用于类似Amazon ElasticBeanstalk这种WAR部署方式的容器。创建一个内嵌运行时目录的WAR文件步骤如下：</p>

<blockquote><ol>
<li>  在运行时目录下添加必须的组件以及其他的资源文件</li>
<li>  按照需要调整 <code>${moqui.home}/MoquiInit.properties</code> 文件</li>
<li>  必要时调整Moqui的配置文件（<code>runtime/conf/Moqui*Conf.xml</code>）</li>
<li>  基于moqui.war文件、你的运行时目录的所有文件以及<code>MoquiInit.properties</code>配置文件，打一个完整WAR包的方式为以下任意一种：</li>
</ol>


<blockquote><ul>
<li><p><code>$ gradle addRuntime</code></p></li>
<li><p><code>$ ant add-runtime</code></p></li>
</ul>
</blockquote>

<ol>
<li>  拷贝创建好的WAR文件（<code>moqui-plus-runtime.war</code>）到部署的目标位置</li>
<li>  运行服务（或者重启/刷新去自动更新运行的WAR）</li>
</ol>
</blockquote>

<p>最终的WAR文件的根目录下就是运行时目录（和WEB-INF目录同级），并且所有的JAR文件都在WEB-INF/lib 目录下。</p>

<h2>编译Moqui框架</h2>

<p>Moqui框架使用Gradle去编译源码。虽然有各种用户自定义的能自动处理常用的构建任务，但是最常用的还是Gradle自带的构建编译任务。框架内部还有一个Ant的构建编译文件，但是这个文件内只是一些常用任务，不包含编译源码的任务。</p>

<table>
<thead>
<tr>
<th></th>
<th>任务说明        </th>
<th align="center">Gradle命令        </th>
<th align="center">Ant命令</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td><em><strong> 编译JAR，WAR文件</strong></em> </td>
<td align="center"> $ gradle build </td>
<td align="center">   </td>
</tr>
<tr>
<td></td>
<td><em><strong> 加载所有的数据</strong></em> </td>
<td align="center"> $ gradle load </td>
<td align="center"> $ ant load</td>
</tr>
<tr>
<td></td>
<td><em><strong> 运行WAR内的服务</strong></em> </td>
<td align="center"> $ gradle run </td>
<td align="center"> $ ant run</td>
</tr>
<tr>
<td></td>
<td><em><strong> 清除JAR，WAR文件</strong></em> </td>
<td align="center"> $ gradle clean </td>
<td align="center">  </td>
</tr>
<tr>
<td></td>
<td><em><strong> 清空所有的编译文件和运行时创建的文件（日志、数据库文件等）</strong></em> </td>
<td align="center"> $ gradle cleanAll </td>
<td align="center">  </td>
</tr>
</tbody>
</table>


<p>注意在Gradle里面，加载（load）和运行（run）任务都依赖于构建（build）任务。由于这种依赖存在，最简单的方式去在一个流行的数据库上创建一个新的开发环境可以通过执行这个命令： <em><code>$ gradle load run</code></em>
它将会创建war文件，运行数据加载器，然后启动服务。停止服务只需要键入<strong><code>&lt;ctrl-c&gt;</code></strong>（或者你自定义的快捷方式）。</p>
]]></content>
  </entry>
  
</feed>
