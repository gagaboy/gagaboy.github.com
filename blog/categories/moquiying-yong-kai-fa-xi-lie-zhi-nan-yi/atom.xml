<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: moqui应用开发系列指南（译） | 问道]]></title>
  <link href="http://gagaboy.github.io/blog/categories/moquiying-yong-kai-fa-xi-lie-zhi-nan-yi/atom.xml" rel="self"/>
  <link href="http://gagaboy.github.io/"/>
  <updated>2014-06-15T19:22:29+08:00</updated>
  <id>http://gagaboy.github.io/</id>
  <author>
    <name><![CDATA[Eric Chang]]></name>
    <email><![CDATA[gagaboy@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【原创译文】创建你的第一个组件（3）]]></title>
    <link href="http://gagaboy.github.io/blog/2014/06/13/moquichap10/"/>
    <updated>2014-06-13T22:10:03+08:00</updated>
    <id>http://gagaboy.github.io/blog/2014/06/13/moquichap10</id>
    <content type="html"><![CDATA[<h2>第三步</h2>

<h3>自定义新增服务</h3>

<p>上面的例子里，createTutorial转换使用了隐式的自动实体服务create#Tutorial。我们来看下如何手动的定义和实现一个服务。</p>

<p>首先定义一个服务使用默认的自动实体增删改查（<strong><code>CrUD</code></strong>）实现。将服务定义XML文件放在下面的位置：
<em><code>runtime/component/tutorial/service/tutorial/TutorialServices.xml</code></em></p>

<!--more-->


<p>内容如下：
```xml 标准的服务定义
<services></p>

<pre><code>&lt;service verb="create" noun="Tutorial" type="entity-auto"&gt;
    &lt;in-parameters&gt;
        &lt;auto-parameters include="all"/&gt;
    &lt;/in-parameters&gt;
    &lt;out-parameters&gt;
        &lt;auto-parameters include="pk" required="true"/&gt;
    &lt;/out-parameters&gt;
&lt;/service&gt;
</code></pre>

<p></services>
```</p>

<p>这个服务将允许Tutorial实体的所有字段传入，并总是返回主键字段（tutorialId）。这个服务定义中我们使用了基于实体的<em><code>auto-parameters</code></em>元素，这样如果我们新增了实体字段的话，它们将自动会体现在这个服务处理中。
现在，我们修改下这个服务定义来添加一个内联的实现。注意下服务中的<strong>type</strong>属性已经发生了变化，并且新增了一个actions元素。</p>

<p>```xml 指定主键规则的服务定义
<service verb="create" noun="Tutorial" type="inline"></p>

<pre><code>&lt;in-parameters&gt;
    &lt;auto-parameters include="all"/&gt;
&lt;/in-parameters&gt;
&lt;out-parameters&gt;
    &lt;auto-parameters include="pk" required="true"/&gt;
&lt;/out-parameters&gt;
&lt;actions&gt;
    &lt;entity-make-value entity-name="Tutorial" value-field="tutorial"/&gt;
    &lt;entity-set value-field="tutorial" include="all"/&gt;
    &lt;if condition="!tutorial.tutorialId"&gt;
        &lt;entity-sequenced-id-primary value-field="tutorial"/&gt;
    &lt;/if&gt;
    &lt;entity-create value-field="tutorial"/&gt;
&lt;/actions&gt;
</code></pre>

<p></service>
```</p>

<p>现在只需改变transition指向这个服务既可以调用了：</p>

<p>```xml 切换自定义的服务
<transition name="createTutorial"></p>

<pre><code>&lt;service-call name="tutorial.TutorialServices.create#Tutorial"/&gt;
&lt;default-response url="."/&gt;
</code></pre>

<p></transition>
```</p>

<p>注意下这个服务名称定义很像一个标准的<code>Java class</code>的命名。它有一个“包名”，本例中是在component/service目录下的"tutorial"目录（也许是以点号分割的多重目录结构）的目录名。然后是一个点号以及类名的等价物，本例中“TutorialServices”就是服务的XML文件的名称，但是没有.xml后缀。这之后又是一个点号，然后是服务的动词和名词操作，以#符号分割。</p>

<h3>Groovy服务</h3>

<p>如果你想使用Groovy（或者框架支持的其他脚本语言）而不用内联的XML动作去实现服务，怎么做呢？这种情况服务定义像这样：</p>

<p>```xml Groovy服务定义
&lt;service verb=&ldquo;create&rdquo; noun=&ldquo;Tutorial&rdquo; type=&ldquo;script&rdquo;</p>

<pre><code>    location="component://tutorial/script/tutorial/createTutorial.groovy"&gt;
&lt;in-parameters&gt;
    &lt;auto-parameters include="all"/&gt;
&lt;/in-parameters&gt;
&lt;out-parameters&gt;
    &lt;auto-parameters include="pk" required="true"/&gt;
&lt;/out-parameters&gt;
</code></pre>

<p></service>
```</p>

<p>注意这里服务的type属性已经变为"script"，并且现在有个location属性去指定脚本的位置。 <br/>
下面是这个Groovy脚本的内容：
```groovy Groovy脚本
EntityValue tutorial = ec.entity.makeValue(&ldquo;Tutorial&rdquo;)
tutorial.setAll(context)
if (!tutorial.tutorialId)</p>

<pre><code>tutorial.setSequencedIdPrimary()
</code></pre>

<p>tutorial.create()
<code>``
当你使用Groovy或者其他语言时，你将会用到基于可执行上下文（**</code>ExecutionContext class`<strong>）这个类去调用Moqui的Java API,通常这个类在脚本里会用"</strong>ec<strong>&ldquo;这个名称。更多的API详情请看</strong><a href="http://www.moqui.org/javadoc/index.html">Java API文档</a><strong>，并查询文档中</strong><a href="http://www.moqui.org/javadoc/org/moqui/context/ExecutionContext.html">ExecutionContext</a>**这个类，这个类关联了很多核心的API接口。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【原创译文】创建你的第一个组件（2）]]></title>
    <link href="http://gagaboy.github.io/blog/2014/06/03/moquichap9/"/>
    <updated>2014-06-03T10:00:54+08:00</updated>
    <id>http://gagaboy.github.io/blog/2014/06/03/moquichap9</id>
    <content type="html"><![CDATA[<h2>第二步</h2>

<h3>我的第一个实体</h3>

<p>实体是一个基本的扁平列表的数据结构，并且通常为数据库中的一张表。一条实体值等价于数据库表的一行记录。Moqui框架没有使用对象关系映射方式，所以我们要做的就是定义一个实体，然后通过实体门面模式（或者其他的高抽象层级的工具）去写代码操作使用实体。</p>

<!--more-->


<p>我们创建一个包含tutorialId和description两个字段的实体XML文件，并命名为“Tutorial”，位于：</p>

<p><em><code>runtime/component/tutorial/entity/TutorialEntities.xml</code></em></p>

<p>内容如下：
```xml Tutorial 实体定义
<entities></p>

<pre><code>&lt;entity entity-name="Tutorial" package-name="tutorial"&gt;
    &lt;field name="tutorialId" type="id" is-pk="true"/&gt;
    &lt;field name="description" type="text-long"/&gt;
&lt;/entity&gt;
</code></pre>

<p></entities>
```</p>

<p>如果你以开发模式（<strong><em>dev mode</em></strong>）运行Moqui框架，实体定义缓存会自动被清理然后创建，所以你无需重启；但是你如果运行产品模式（<strong><em>production mode</em></strong>）或者你不想等待（Moqui框架启动并不是很快）那么你就重启吧。</p>

<p>你什么时候去创建表呢？除非你关闭自动创建的特性（在Moqui的XML配置文件中有开关），否则实体门面模式将会在你第一次使用到这个实体的时候检查实体是否存在，不存在即会创建它。</p>

<h3>添加一些数据</h3>

<p>实体门面模式具有从XML文件中读取或者写入数据的功能，这些XML文件中的节点元素需要和实体名对应，同样的属性名和字段名需对应。</p>

<p>我们稍后将创建一个用户界面去录入数据，同时你也可以使用自动界面（Auto Screen）或者使用工具应用中的实体数据交互界面（Entity Data UI）和你新建的实体进行数据操作。数据文件对于以下几种数据来说是很有用的：用于代码运行所需的种子数据、测试数据、验证/展示数据模型如何使用的验证数据。那么，我们就开始动手吧。</p>

<p>创建一个实体门面的XML文件在：<em><code>runtime/component/tutorial/data/TutorialData.xml</code></em></p>

<p>内容为：
```xml 种子数据</p>

<pre><code>&lt;entity-facade-xml type="seed"&gt;
    &lt;Tutorial tutorialId="TestOne" description="Test one description."/&gt;
    &lt;Tutorial tutorialId="TestTwo" description="Test two description."/&gt;
&lt;/entity-facade-xml&gt;
</code></pre>

<p>```</p>

<p>加载数据只要通过“$ ant load”命令即可，或者在“运行Moqui”章节中提及的其他加载方式也可。</p>

<h3>自动查询表单</h3>

<p>在tutorial界面下添加一个子界面的XML定义文件，并将其放到：</p>

<p><em><code>runtime/component/tutorial/screen/tutorial/FindTutorial.xml</code></em></p>

<p>```xml 查询表单定义
<screen require-authentication="anonymous-view"></p>

<pre><code>&lt;transition name="findTutorial"&gt;
    &lt;default-response url="."/&gt;
&lt;/transition&gt;
&lt;actions&gt;
    &lt;entity-find entity-name="Tutorial" list="tutorialList"&gt;
        &lt;search-form-inputs/&gt;
    &lt;/entity-find&gt;
&lt;/actions&gt;
&lt;widgets&gt;
    &lt;form-list name="ListTutorials" list="tutorialList" 
                transition="findTutorial"&gt;
        &lt;auto-fields-entity entity-name="Tutorial"
                            field-type="find-display"/&gt;
    &lt;/form-list&gt;
&lt;/widgets&gt;
</code></pre>

<p></screen>
```</p>

<p>这个界面中有几个关键部分：</p>

<ul>
<li>转换 transition
转换/跳转指的是界面之间的链接。类似于一个顺序图一样，我们把每个界面当成一个个节点，那么界面中定义的转换/跳转就是“线”一般，从一个节点界面指向另外一个节点界面（或者自己指向自己），并且同时有些跳转还包含调用动作或者服务。</li>
</ul>


<blockquote><ul>
<li><p>单个转换可以按照条件或者不同的错误结果返回各种响应页面，一切都取决于你的界面设计需求</p></li>
<li><p>个别转换会指向当前页面（<em>比如页面刷新就是这种场景</em>）</p></li>
</ul>
</blockquote>

<ul>
<li>查询实体动作 actions.entity-find
这里页面渲染时只有一个界面动作：查询实体（entity-find）。</li>
</ul>


<blockquote><ul>
<li><p>  通常使用<em>entity-find</em>元素（或者调用Java API使用<em>EntityFind</em>对象）时，你需要指定过滤条件，排序字段或者其他查询相关的信息去运行</p></li>
<li><p>  在这个例子中，我们使用了XML表单内的标准参数去进行实体查询，所以我们可以使用<em>search-form-inputs</em>子元素去自动生成处理字段</p></li>
<li><p>  如果想知道这些参数应该长啥样只要查看浏览器中的HTML代码即可，这些都是基于XML表单定义自动生成的</p></li>
</ul>
</blockquote>

<ul>
<li>widgets.form-list
这个例子里面定义的是个真实的表单，指定的是多条记录/行数据的“列表”表单（相对于“单个”表单）</li>
</ul>


<blockquote><ul>
<li><p>  这里的name属性可以为任意值，但是需要XML界面内唯一</p></li>
<li><p>  注意这里的list属性参照的是动作actions块中的entity-find返回的结果，transition属性参照的是界面定义最上面的transition元素</p></li>
<li><p>  既然目标是自动创建一个基于实体定义的表单，我们便给<em>auto-fields-entity</em>元素赋值为我们的"Tutorial"实体，设置field-type属性的值为"find-display"选项，表示会创建查询字段在头部并且在表格中生成并显示每条记录。</p></li>
</ul>
</blockquote>

<p>使用URL路径：<a href="http://localhost:8080/apps/tutorial/FindTutorial">http://localhost:8080/apps/tutorial/FindTutorial</a> 进行访问。</p>

<h3>指定字段</h3>

<p>如果不是按照默认的方式去生成description字段，你如何按需指定它的展现方式呢？</p>

<p>要达到这个要求，你只要在form-list元素内添加一个field元素，并且跟在fields-entity元素之后，像这样：</p>

<p>```xml 自定义指定字段
&lt;form-list name=&ldquo;ListTutorials&rdquo; list=&ldquo;tutorialList&rdquo;</p>

<pre><code>    transition="findTutorial"&gt;
&lt;auto-fields-entity entity-name="Tutorial" field-type="find-display"/&gt;
&lt;field name="description"&gt;
    &lt;header-field show-order-by="true"&gt;
        &lt;text-find hide-options="true"/&gt;
    &lt;/header-field&gt;
    &lt;default-field&gt;
        &lt;display/&gt;
    &lt;/default-field&gt;
&lt;/field&gt;
</code></pre>

<p>&lt;/form-list>
```
由于此处在field元素中name属性的值对应的字段在<strong>auto-fields-entity</strong>元素执行时已被创建了，那么这里将会被重写。如果name值不在实体定义中，则会新生成一个额外的字段。这个结果看起来和<em>auto-fields-entit</em>y元素自动处理的机制很像，并且这也是你需要清晰明白的。</p>

<h3>添加一个新建表单</h3>

<p>让我们添加一个按钮来弹出一个新建表单，并创建一个转换来处理输入数据操作。</p>

<p>首先在之前创建的界面FindTutorial.xml中添加一个转换，就跟在findTutorial转换之后：</p>

<p>```xml 新建操作的转换定义
<transition name="createTutorial"></p>

<pre><code>&lt;service-call name="create#Tutorial" /&gt;
&lt;default-response url="." /&gt;
</code></pre>

<p></transition>
```</p>

<p>这个转换只是调用了<code>create#Tutorial</code>服务，然后跳转回了当前界面。</p>

<p>这个<code>create#Tutorial</code>服务从哪里来的呢？我们还没定义任何它的实现内容。Moqui框架的服务门面支持一种特殊的无需定义实现的实体增删改查（CrUD）操作的服务。这个服务的名字由两部分组成：<strong>一个动词和一个名词，中间用#隔开</strong>。只要动词为<strong><code>create, update, store, 或者delete</code></strong>，同时名词是一个有效的实体名称，服务门面就会认为这个服务是个隐式的自动实体服务并会完成预期的操作。这个服务调用是完全基于实体定义和传递的参数。举个例子，如果你使用create动词并传递实体的一个主键字段，服务就会使用这个主键字段，否则服务将会使用实体名称作为序列关键字自动生成主键序列号。</p>

<p>然后我们来添加一个新增表单，当按钮点击时展现一个隐藏的容器界面。在之前创建的FindTutorial界面中，添加容器到widget元素内的form-list元素上面，这样就会在列表表单上展现这个容器：</p>

<p>```xml 新建界面的表单定义
&lt;container-dialog id=&ldquo;CreateTutorialDialog&rdquo; button-text=&ldquo;Create Tutorial&rdquo;></p>

<pre><code>&lt;form-single name="CreateTutorial" transition="createTutorial"&gt;
    &lt;auto-fields-entity entity-name="Tutorial" field-type="edit"/&gt;
    &lt;field name="submitButton"&gt;
        &lt;default-field title="Create"&gt;
        &lt;submit/&gt;
        &lt;/default-field&gt;
    &lt;/field&gt;
&lt;/form-single&gt;
</code></pre>

<p>&lt;/container-dialog>
```</p>

<p>这个界面定义通过刚才添加的transition来引用，并且使用<em>auto-fields-entity</em>元素中值为"edit"的<code>field-type</code>元素定义来自动生成编辑字段。最后一个小细节是声明一个按钮去提交表单，这样就可以运行了。尝试着做一下，然后看看列表中的数据是否出现新增的记录。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【原创译文】创建你的第一个组件（1） ]]></title>
    <link href="http://gagaboy.github.io/blog/2014/06/03/moquichap8/"/>
    <updated>2014-06-03T09:59:13+08:00</updated>
    <id>http://gagaboy.github.io/blog/2014/06/03/moquichap8</id>
    <content type="html"><![CDATA[<h2>概要</h2>

<p>本章是篇教你一步步创建并运行你自己的Moqui组件的向导，包含了人机交互界面，业务逻辑以及数据库交互。</p>

<ul>
<li><p>第一步：以创建一个“Hello world！”的界面开始你的第一个组件</p></li>
<li><p>第二步：延续上步，你将会定义一个自己的实体（数据库表），然后添加表单去查询和创建实体的记录</p></li>
<li><p>第三步：创建一些自定义的业务逻辑，而不使用框架自带的默认基于实体定义的CrUD逻辑操作</p></li>
</ul>


<!--more-->


<p>本文描述的运行方式就是简单的使用内嵌的servlet容器。</p>

<h2>第一步</h2>

<h3>下载Moqui框架</h3>

<p>如果你还没下载Moqui框架就赶快去下载吧。你需要有一个moqui-&lt;版本号>的目录，用来存放最新版本的moqui的war文件以及默认的运行时目录。然后以这个目录为根目录开始我们的教程。</p>

<p>如果你是新下载的，快速的初始化数据并运行吧：</p>

<blockquote><p><strong>$ ant load</strong></p>

<p><strong>$ ant run</strong></p></blockquote>

<p>使用浏览器访问 <a href="http://localhost:8080/">http://localhost:8080/</a> ，点击界面左下方名称为“John Doe”的按钮登录，然后随便看一下演示环境。
现在退出系统（命令行界面按快捷键<strong><code>&lt;ctrl-c&gt;</code></strong>），你已经可以继续下一个步骤了。</p>

<h3>创建一个组件</h3>

<p>Moqui依照“<strong><code>约定/配置优于编码</code></strong>”的原则进行组件开发，所以创建组件你所要做的就是创建目录：</p>

<blockquote><p>$ cd runtime/component</p>

<p>$ mkdir tutorial</p></blockquote>

<p>然后进入这个目录并创建一些后面要用到的标准目录：</p>

<blockquote><p>$ cd tutorial</p>

<p>$ mkdir data</p>

<p>$ mkdir entity</p>

<p>$ mkdir screen</p>

<p>$ mkdir script</p>

<p>$ mkdir service</p></blockquote>

<p>组件创建好了就启动框架吧（使用“<strong><code>$ ant run</code></strong>”或者其他类似的命令）。</p>

<h3>添加一个界面</h3>

<p>使用你常用的IDE或者文本编辑器添加一个界面的XML文件，存放于：</p>

<p><em><code>runtime/component/tutorial/screen/tutorial.xml</code></em></p>

<p>现在，制作个超简单的界面，上面只有“"Hello world!”的文本。XML内容如下：</p>

<p>```xml Hello world界面定义
<screen require-authentication="false"></p>

<pre><code>&lt;widgets&gt;
    &lt;label type="h1" text="Hello world!"/&gt;
&lt;/widgets&gt;
</code></pre>

<p></screen>
```</p>

<p>注意上面的<code>require-authentication</code>属性被设置为false。默认的值为true，并且这个界面会被要求授权和鉴权。我们会在后面的安全的章节中讨论可配置的自动识别的构件授权机制。</p>

<h3>以子界面方式挂载</h3>

<p>为了能让你的界面访问生效，需要将这个界面作为子界面挂载到根界面下某个已存在的界面下。在Moqui框架的界面机制中，访问界面的URL路径以及功能菜单的结构都是基于子界面的层级进行驱动的，所以这种挂载方式将会自动设置这个界面的访问URL路径并添加一个菜单分页。</p>

<p>因为这个入门例子的目标，我们将使用已有的根界面以及运行时目录中界面的头部、尾部等资源。运行时目录中有一个定义了根界面的webroot组件位于：</p>

<p><em><code>runtime/component/webroot/screen/webroot.xml</code></em></p>

<p>顺便说下，根界面在Moqui的XML配置文件中通过<code>webapp-list.webapp.root-screen</code>元素被指定，你可以为不同的域名配置多个入口的根界面。</p>

<p>为了使子界面层级定义的方式更灵活，入口根界面只有一个基础的HTML头和body，没有头部和尾部的页面内容，所以我们把我们的界面放到“apps”界面下，“apps”界面中已有一个头部的菜单并提供了一些内容。修改apps的界面：</p>

<p><em><code>runtime/component/webroot/screen/webroot/apps.xml</code></em></p>

<p>apps.xml文件中，在subscreens元素下添加一个subscreens-item元素，如下：</p>

<p>```xml 子界面定义1
&lt;subscreens-item name=&ldquo;tutorial&rdquo; menu-title=&ldquo;Tutorial&rdquo;</p>

<pre><code>            location="component://tutorial/screen/tutorial.xml"/&gt;
</code></pre>

<p>```</p>

<p>名称（name）属性用于指定URL访问这个页面的路径值，所以你的界面在浏览器上的访问路径为：<a href="http://localhost:8080/apps/tutorial">http://localhost:8080/apps/tutorial</a></p>

<p>如果你不想修改已存在的界面文件，但是仍然希望将你的界面作为子界面挂载到其他界面下，你可以通过数据库记录的方式去达到这个目的。类似于（在<code>entity-facade-xml</code>中格式化代表实体的元素以及代表字段的元素）：</p>

<p>```xml 子界面定义2
&lt;SubscreensItem screenLocation=“component://webroot/screen/webroot/apps.xml”</p>

<pre><code>            subscreenName="tutorial" userGroupId=“ALL_USERS"
            subscreenLocation=“component://tutorial/screen/tutorial.xml"
            menuTitle="Tutorial" menuIndex="1" menuInclude="Y"/&gt;
</code></pre>

<p>```</p>

<h3>初试界面内嵌入内容</h3>

<p>除了使用label节点元素，我们还可以在界面“下”使用HTML文件的方式。首先新建一个简单的HTML文件，放在：<em><code>runtime/component/tutorial/screen/tutorial/hello.html</code></em></p>

<p>这个HTML文件能包含任何的HTML元素，同时既然界面的父界面又包含了头部/尾部等，这个HTML文件又被包含在这个界面中，我们就可以很简单的这样处理这个HTML了：</p>

<p>```html HTML页面</p>

<h1>Hello world! (from hello.html file)</h1>


<p>```</p>

<p>现在就可以在tutorial.xml界面定义中使用<code>render-mode.text</code>元素来明确包含这个HTML文件了：</p>

<p>```xml 界面中嵌入HTML
<screen></p>

<pre><code>&lt;widgets&gt;
    &lt;label type="h1" text="Hello world!"/&gt;
    &lt;render-mode&gt;
        &lt;text type="html" 
        location="component://tutorial/screen/tutorial/hello.html"/&gt;
    &lt;/render-mode&gt;
&lt;/widgets&gt;
</code></pre>

<p></screen>
```</p>

<p>那么这个render-mode到底是什么东西？Moqui框架的XML界面理念中存有<strong><code>平台不可知论</code></strong>以及界面可被渲染在各种环境中。源于此，我们不想界面内的任何东西在没有明确清楚的情况下就以某种确定渲染方式去展现。在render-mode下，你可以为不同的渲染模式定义各种子元素，甚至是各种文本模式，如HTML，XML，XSL-FO（<em>用于格式化XML数据的语言，全称为Extensible Stylesheet Language Formatting Objects 格式化对象的可扩展样式表语言，是W3C参考标准，现在通常叫做XSL</em>），CSV等。这样的话，一个界面定义就可以被渲染成不同的模式，并且输出的产品也可以按需进行切换。
这个界面还是按照前面例子的URL路径去访问，只是现在采用的是嵌入HTML页面内容的方式，而不是在界面定义中内联使用一个label元素的方式了。</p>

<h4>再试界面子内容方式</h4>

<p>另外种方式展现这个hello.html的内容就是把它作为界面的子内容。</p>

<p>这样的话，这个hello.html文件必须被放置在与这个界面同名的子目录下。例如，放在tutorial.xml文件同级的一个名为tutorial的文件夹下。</p>

<p>现在我们还需要做到如下几点：</p>

<ul>
<li>设置界面的<code>include-child-content</code>属性为“true”，用来声明tutorial.xml界面包含了子内容</li>
<li>添加<code>widgets</code>下的<code>subscreens-active</code>元素，用以确定界面包含子界面或者子内容的位置</li>
</ul>


<p>完成上述操作，你的界面的XML文件应该如下所示：</p>

<p>```xml 界面中嵌入HTML
<screen include-child-content="true"></p>

<pre><code>&lt;widgets&gt;
    &lt;label type="h1" text="Hello world!"/&gt;
    &lt;subscreens-active/&gt;
&lt;/widgets&gt;
</code></pre>

<p></screen>
```</p>

<p>为了能看到这个文件内容，你需要访问另外个URL路径来知会Moqui框架你需要获得tutorial界面下的hello.html文件：<a href="http://localhost:8080/apps/tutorial/hello.html">http://localhost:8080/apps/tutorial/hello.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【原创译文】运行Moqui  ]]></title>
    <link href="http://gagaboy.github.io/blog/2014/06/03/moquichap7/"/>
    <updated>2014-06-03T09:55:21+08:00</updated>
    <id>http://gagaboy.github.io/blog/2014/06/03/moquichap7</id>
    <content type="html"><![CDATA[<h2>下载Moqui以及必备软件</h2>

<p>Moqui框架默认的配置软件只需要Java的JDK 6及以后版本（推荐JDK 7）。源码构建编译框架需要Gradle 1.6及以后版本。</p>

<p>你可以从SourceForge下载Moqui框架：</p>

<p><a href="https://sourceforge.net/projects/moqui/files/">https://sourceforge.net/projects/moqui/files/</a></p>

<!--more-->


<p>选择最新版本的目录，然后任意选择二进制或者源码发布包。框架的二进制发布包以“moqui-&lt;版本号>.zip”命名，源码包以“moqui-&lt;版本号>-src.zip”命名。</p>

<p>Moqui框架的最新源码可以通过GitHub进行下载和在线预览，地址为：</p>

<p><a href="https://github.com/jonesde/moqui" title="moqui源码">https://github.com/jonesde/moqui</a></p>

<p>同样的业务地幔构件的GitHub最新代码地址为：</p>

<p><a href="https://github.com/jonesde/mantle" title="mantle源码">https://github.com/jonesde/mantle</a></p>

<p>虽然你可以单独的从GitHub上下载Mantle 地幔构件，但是在SourceForge上也有一个内嵌Moqui框架环境的Mantle整包。</p>

<h2>运行时目录以及Moqui的XML配置文件</h2>

<p>Moqui框架部署运行主要有三个核心部分：</p>

<blockquote><ul>
<li>可执行的WAR包文件（详细见下）</li>
<li>运行时目录</li>
<li>Moqui配置文件（XML格式）</li>
</ul>
</blockquote>

<p>不管你怎么使用这个可执行的WAR文件，你必须拥有一个运行时的目录，同时你也许会重写Moqui默认配置文件（<em><code>MoquiDefaultConf.xml</code></em>文件）里的配置信息，例如在运行时目录或者conf目录中的<em><code>MoquiProductionConf.xml</code></em>文件里面重写。</p>

<p>运行时目录主要放置的是你想要加载的组件、应用系统的入口文件（界面入口文件）以及配置文件。同时，框架会在这个目录下存放日志文件，Derby 数据库文件（如果你使用Derby数据库的话）等。也许你最终是要在自己的代码库里面创建自己的运行时目录，你可以把默认的运行时目录作为你的工程的起始点。
运行的时候，需要指定下如下两个属性：</p>

<table>
<thead>
<tr>
<th>属性</th>
<th>属性说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><em><strong> moqui.runtime </strong></em> </td>
<td>指定运行时目录（如果存在runtime的子目录，默认配置为“./runtime”;如果不存在，则配置为“.”）</td>
</tr>
<tr>
<td><em><strong> moqui.conf </strong></em> </td>
<td>指定Moqui的运行时配置文件（类似上面配置，使用URL或者路径方式配置）</td>
</tr>
</tbody>
</table>


<p>这里有两种方式去指定这两个属性：</p>

<blockquote><ul>
<li>通过编译路径下的<em><code> MoquiInit.properties</code></em> 文件</li>
<li>在命令行通过系统属性去指定（使用java -D 参数）</li>
</ul>
</blockquote>

<h2>可执行的WAR文件</h2>

<p>耶，是的：就是一个可以执行的WAR文件。你主要做的就是下面这些事情（通过简单的命令去按需展示和修改）：</p>

<table>
<thead>
<tr>
<th></th>
<th>命令说明        </th>
<th align="center">命令示例</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td><em><strong>加载数据</strong></em> </td>
<td align="center">$ java -jar moqui-&lt;version>.war -load</td>
</tr>
<tr>
<td></td>
<td><em><strong>运行内置的web服务</strong></em> </td>
<td align="center">$ java -jar moqui-&lt;version>.war</td>
</tr>
<tr>
<td></td>
<td><em><strong> WAR包形式部署（Tomcat等）</strong></em> </td>
<td align="center">$ cp moqui-&lt;version>.war ../tomcat/webapps</td>
</tr>
<tr>
<td></td>
<td><em><strong> 显示配置和帮助信息）</strong></em> </td>
<td align="center">$ java -jar moqui-&lt;version>.war -help</td>
</tr>
</tbody>
</table>


<p>当运行数据加载器时（使用 -load 参数），以下的附加参数都是可用的：</p>

<table>
<thead>
<tr>
<th></th>
<th> 附加参数             </th>
<th align="center"> 使用说明           </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> <em><strong>-types=&lt;type>[,&lt;type>]</strong></em></td>
<td align="center"> 加载指定的数据类型，适配entity-facade-xml.@type属性（可以是任意的数据，通常为：种子数据，种子初始化数据，样例数据等）</td>
</tr>
<tr>
<td></td>
<td> <em><strong>-location=&lt;location> </strong></em> </td>
<td align="center"> 加载指定路径下的单个数据文件  </td>
</tr>
<tr>
<td></td>
<td> <em><strong>-timeout=&lt;seconds> </strong></em> </td>
<td align="center"> 每个文件加载事务的超时时间，默认为600秒（10分钟）</td>
</tr>
<tr>
<td></td>
<td> <em><strong>-dummy-fks </strong></em>    </td>
<td align="center"> 使用虚拟外键，规避引用完整性错误</td>
</tr>
<tr>
<td></td>
<td> <em><strong>-use-try-insert </strong></em> </td>
<td align="center"> 尝试插入、更新操作来替代优先检查数据记录的异常校验</td>
</tr>
<tr>
<td></td>
<td> <em><strong>-tenantId=&lt;tenantId> </strong></em> </td>
<td align="center"> 加载指定租户ID的数据</td>
</tr>
</tbody>
</table>


<p>注意下，如果命令中没有<em>-types</em> 或者 <em>-location</em> 参数，将会加载所有已知类型的数据文件。</p>

<p>上面显示的运行时配置moqui.runtime 和moqui.conf 属性的例子来源于编译路径下的MoquiInit.properties文件。通过命令行来指定这些参数的例子如下：</p>

<p><code>$ java –D moqui.conf=conf/MoquiStagingConf.xml -jar moqui-&lt;version&gt;.war</code></p>

<p>注意：moqui.conf参数的路径关联的是moqui.runtime的目录，或者换句话说，指定的是相应运行时目录下的配置文件。</p>

<p>当运行内嵌的web服务（除了使用<em>-load</em>和<em>-help</em>参数）使用的是Winstone Servlet容器。完整的Winstone可用参数列表，请参见：</p>

<p><a href="http://winstone.sourceforge.net/#commandLine">http://winstone.sourceforge.net/#commandLine</a></p>

<p>为了方便使用，此处罗列下常用的Winstone参数：</p>

<table>
<thead>
<tr>
<th></th>
<th> 参数             </th>
<th align="center"> 参数说明           </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> <em><strong> &mdash;httpPort</strong></em> </td>
<td align="center"> 设置http的监听端口。-1表示禁用，默认为8080</td>
</tr>
<tr>
<td></td>
<td> <em><strong> &mdash;httpListenAddress </strong></em> </td>
<td align="center"> 设置http的监听地址。默认为所有接口</td>
</tr>
<tr>
<td></td>
<td> <em><strong> &mdash;httpsPort </strong></em> </td>
<td align="center"> 设置https的监听端口。-1表示禁用，默认禁用</td>
</tr>
<tr>
<td></td>
<td> <em><strong> &mdash;ajp13Port </strong></em> </td>
<td align="center"> 设置ajp13的监听端口。-1表示禁用，默认为8009</td>
</tr>
<tr>
<td></td>
<td> <em><strong> &mdash;controlPort </strong></em> </td>
<td align="center"> 设置关闭/控制的端口。-1表示禁用，默认禁用</td>
</tr>
</tbody>
</table>


<h2>在WAR文件中内嵌运行时目录</h2>

<p>Moqui框架能够运行加载一个外部的运行时目录（独立于WAR文件之外），也支持运行时目录打包在WAR文件内部的方式。内嵌的方式特别适用于类似Amazon ElasticBeanstalk这种WAR部署方式的容器。创建一个内嵌运行时目录的WAR文件步骤如下：</p>

<blockquote><ol>
<li>  在运行时目录下添加必须的组件以及其他的资源文件</li>
<li>  按照需要调整 <code>${moqui.home}/MoquiInit.properties</code> 文件</li>
<li>  必要时调整Moqui的配置文件（<code>runtime/conf/Moqui*Conf.xml</code>）</li>
<li>  基于moqui.war文件、你的运行时目录的所有文件以及<code>MoquiInit.properties</code>配置文件，打一个完整WAR包的方式为以下任意一种：</li>
</ol>


<blockquote><ul>
<li><p><code>$ gradle addRuntime</code></p></li>
<li><p><code>$ ant add-runtime</code></p></li>
</ul>
</blockquote>

<ol>
<li>  拷贝创建好的WAR文件（<code>moqui-plus-runtime.war</code>）到部署的目标位置</li>
<li>  运行服务（或者重启/刷新去自动更新运行的WAR）</li>
</ol>
</blockquote>

<p>最终的WAR文件的根目录下就是运行时目录（和WEB-INF目录同级），并且所有的JAR文件都在WEB-INF/lib 目录下。</p>

<h2>编译Moqui框架</h2>

<p>Moqui框架使用Gradle去编译源码。虽然有各种用户自定义的能自动处理常用的构建任务，但是最常用的还是Gradle自带的构建编译任务。框架内部还有一个Ant的构建编译文件，但是这个文件内只是一些常用任务，不包含编译源码的任务。</p>

<table>
<thead>
<tr>
<th></th>
<th>任务说明        </th>
<th align="center">Gradle命令        </th>
<th align="center">Ant命令</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td><em><strong> 编译JAR，WAR文件</strong></em> </td>
<td align="center"> $ gradle build </td>
<td align="center">   </td>
</tr>
<tr>
<td></td>
<td><em><strong> 加载所有的数据</strong></em> </td>
<td align="center"> $ gradle load </td>
<td align="center"> $ ant load</td>
</tr>
<tr>
<td></td>
<td><em><strong> 运行WAR内的服务</strong></em> </td>
<td align="center"> $ gradle run </td>
<td align="center"> $ ant run</td>
</tr>
<tr>
<td></td>
<td><em><strong> 清除JAR，WAR文件</strong></em> </td>
<td align="center"> $ gradle clean </td>
<td align="center">  </td>
</tr>
<tr>
<td></td>
<td><em><strong> 清空所有的编译文件和运行时创建的文件（日志、数据库文件等）</strong></em> </td>
<td align="center"> $ gradle cleanAll </td>
<td align="center">  </td>
</tr>
</tbody>
</table>


<p>注意在Gradle里面，加载（load）和运行（run）任务都依赖于构建（build）任务。由于这种依赖存在，最简单的方式去在一个流行的数据库上创建一个新的开发环境可以通过执行这个命令： <em><code>$ gradle load run</code></em>
它将会创建war文件，运行数据加载器，然后启动服务。停止服务只需要键入<strong><code>&lt;ctrl-c&gt;</code></strong>（或者你自定义的快捷方式）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【原创译文】Moqui 概览 — 纵览 ]]></title>
    <link href="http://gagaboy.github.io/blog/2014/06/03/moquichap6/"/>
    <updated>2014-06-03T09:55:16+08:00</updated>
    <id>http://gagaboy.github.io/blog/2014/06/03/moquichap6</id>
    <content type="html"><![CDATA[<h2>Web浏览器请求</h2>

<p>一个web浏览器请求经由Servlet容器会传递到框架层面（默认实现是内嵌了Winstone Servlet容器，同样也支持Tomcat以及其他的Java Servlet规范容器）。Servlet容器通过web.xml文件按照标准的方式在服务器上找到安装的MoquiServlet，并查找到相应的请求路径。MoquiServlet很简单，仅仅设置了一个运行时上下文，然后渲染请求的界面。</p>

<!--more-->


<p>Web应用的界面渲染源自于配置的“根”界面，然后希望获取到的目标界面都通过子界面路径的方式向下查找。除了目标界面路径，可能也同时会有一个转换名称用于跳转到目标界面。</p>

<p>转换用于处理界面跳转的输入数据（而不是准备展现的数据），区别于界面上的动作，动作通常是为了准备呈现的数据（不是处理跳转的输入数据）。如果存在一个转换名称，那么这个转换对应的服务和动作就会运行，同时会反馈一个转换指定的响应（基于条件约定而不管是否存在错误），然后通常这个响应会在跳转到另一个界面进行反馈。</p>

<p>当一个服务被调用（通常来源于转换或者界面动作），服务门面会按照服务定义去验证并清空输入的map，然后调用执行定义好的内部或者外部脚本，Java方法，自动或隐式的实体操作或者远程服务。</p>

<p>与数据库交互的实体操作，只能通过服务进行写操作，同时任何时候都可以通过界面的动作去进行读操作（转换、界面动作、服务脚本/方法等都可以支持读操作）。</p>

<p><img src="/moquiImgs/requestProcess.png" title="requestProcess" alt="requestProcess" /></p>

<h2>Web服务调用</h2>

<p>Web服务请求通常伴随着一个浏览器端的表单提交请求发起，并受控于界面跳转。请求过来的数据受控于跳转的动作，同时，action动作控制的响应比较特殊，需要以XML，JSON等格式进行返回。跳转/转换的默认响应需要被设置为“none”类型，这样就不会去请求渲染界面或者重定向到某个界面了。</p>

<h2>邮件的接收、发送</h2>

<p>接收邮件通过pollEmailServer服务（配置使用email邮件服务的实体）进行邮件的ECA规则来控制。这些规则里含有解析邮件以及格式化成有效的maps格式的信息。如果规则条件满足，就会执行规则定义的动作行为。规则能够支持你想要做的任何事情，比如在某些地方保存某些信息，在目录中添加一个用于回顾的队列，生成一个自动触发的响应等。</p>

<p>发送邮件最简单的方式就是调用sendEmailTemplate服务。这个服务通过emailTemplateId查找到EmailTemplate记录，就能获取到这个待发送邮件的配置信息，包括标题、发送地址、要展示的XML界面、附件等各种其他操作。这意味着可以适用于各种邮件场景，特别是通知公告类的信息，以及系统管理的自动回复客户的服务信息等。</p>
]]></content>
  </entry>
  
</feed>
